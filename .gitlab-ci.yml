variables:
  GOVER_VERSION: 0.1.3-development-build.29

stages:
  - generateVersion
  - buildBin
  - pushBinNexus
  - gotest
  - build
  # - createGitRelease
  # - security_scan
  # - test
include:
  - project: "SSF/SSF-Tools/ci-templates"
    ref: v0.0.8
    file:
      # - "auto_devops.yml"
      - "workflow.yml"
      # - "/jobs/build/docker_build.yml"
      # - "/jobs/security_scan/twistlock.yml"


###################################################################
# Uncomment and duplicate each section with a unique name for
# multiple docker builds per repo or if your build needs additional
# options. This section should be used if you would like to tag the
# docker image with something other than the repo name
###################################################################


# build-${CI_PROJECT_NAME}:
#   extends: .docker_build
#   #The below items are needed per variant.
#   variables:
#     DOCKERFILE_PATH: ./Dockerfile
#     DOCKER_CONTEXT: ./

# releaseArtifact2nexus_script zips up all artifacts and only pushes one, this will not work
# when you want to link to specific artifacts...

generateVersion:
  stage: generateVersion
  image: 
    name: ${CONTAINER_REGISTRY}/ssf-tools/gover:${GOVER_VERSION}
  script:
    - gover version -o _version.txt
  artifacts:
    paths:
      - _version.txt

buildBin:
  stage: buildBin
  image: ${CONTAINER_REGISTRY}/dockerhub/golang:1.20.2 
  script:
  - echo Building linux/amd64 binary
  - GOOS=linux GOARCH=amd64 go build -o bin/${CI_PROJECT_NAME}-linux-amd64 main.go
  artifacts:
    paths:
    - bin/${CI_PROJECT_NAME}-linux-amd64
    expire_in: 1 day
  
pushBinNexus:
  stage: pushBinNexus
  image: ${CONTAINER_REGISTRY}/dockerhub/curlimages/curl:8.00.1
  script:
  - export VERSION=$(cat _version.txt)
  - export REPO_URL="https://${NEXUS_URL}/repository/${RELEASE_RAW}/${CI_PROJECT_NAME}/bin/${Version}/${CI_PROJECT_NAME}-linux-amd64"
  - echo Pushing binary to Nexus $REPO_URL
  - curl --user ${NEXUS_USER}:${NEXUS_PASS} --upload-file bin/${CI_PROJECT_NAME}-linux-amd64 "${REPO_URL}" -f 

gotest:
  stage: gotest
  image: ${CONTAINER_REGISTRY}/dockerhub/golang:1.20.2 
  script:
    - echo running tests
    - go test ./... -v -coverpkg=./... -coverprofile cover.out
  artifacts:
    paths:
      - cover.out

# Gitlab Anchor called &kaniko-build
.kaniko-build: &kaniko-build
  - |
    /kaniko/executor --context $CI_PROJECT_DIR \
    --dockerfile Dockerfile \
    --destination $CONTAINER_REGISTRY/ssf-tools/$CI_PROJECT_NAME:$IMAGE_TAG \
    --build-arg TARGETOS=linux \
    --build-arg TARGETARCH=amd64 \
    --label COMMIT_SHA=$CI_COMMIT_SHA \
    --label VERSION=$VERSION \
    --label BUILD=$CI_PIPELINE_IID \
    --label MAINTAINER="Mitchell Murphy<mitchell.k.murphy.ctr@socom.mil"
# Jobs
build:
  stage: build
  image: 
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  before_script:
    - |
      cat <<EOF > /kaniko/.docker/config.json
      {
        "auths": {
          "$CONTAINER_REGISTRY": {
            "auth": "$CONTAINER_REGISTRY_TOKEN"
          }
        }
      }
      EOF
    - export IMAGE_TAG=$(cat _version.txt)
    - echo "Image tag = $IMAGE_TAG"
  script:
    - *kaniko-build
  # only:
  #   - main

# version_check happens in stage: build. This is very misleading, it also builds an OCI image, so
# this should be explicitly defined as dockerBuild and version_check should be its own stage 
# build:
#   before_script:
#   - export Version=$(cat _version.txt | cut -d'+' -f1' | tr + -) 
#   # the directory structure in Nexus for storing Docker iamges does not follow standards.
#   # The tag should include any necessary information, do not make it convoluted.
#   extends: .docker_build

# createGitRelease:
#   stage: createGitRelease
#   image: ${CONTAINER_REGISTRY}/dockerhub/curlimages/curl:8.00.1
#   script:
#   - export RELEASE_URL="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/releases"
#   - export BASE_URL="https://${NEXUS_URL}/repository/${RELEASE_RAW}/${CI_PROJECT_NAME}/bin/${Version}"
#   - |
#     cat > release.json << EOF
#     {
#       "name": "$Version", 
#       "tag_name": "$Version",
#       "ref": "$Version",
#       "description": "$RELEASE_DESCRIPTION",
#       "assets": { 
#         "links": [
#           { "name": "$CI_PROJECT_NAME-linux-amd64", "url": "$BASE_URL/$CI_PROJECT_NAME-linux-amd64", "link_type":"other" }
#         ]
#       }
#     }
#     EOF
#   - |
#     curl --header 'Content-Type: application/json' --header "PRIVATE-TOKEN: ${GOVAR_TOKEN}" \
#     -d @release.json ${RELEASE_URL}

# twistlock_scan:
#   extends: .twistlock_scan
# #  The below items are needed per multi-build variant.
# #   variables:
# #     DOCKER_VARIANT: variant-tag

# twistlock_to_hdf:
#   extends: .twistlock_to_hdf
#   variables:
#     TWISTLOCK_SCAN_JOB_NAME: twistlock_scan

# mega-linter:
#   stage: test
#   image: ${CONTAINER_REGISTRY}/dockerhub/nvuillam/mega-linter-python:v4
#   script: ["/bin/bash /entrypoint.sh"]
#   variables:
#     DEFAULT_WORKSPACE: $CI_PROJECT_DIR
#     ENABLE: JSON
